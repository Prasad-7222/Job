//ass1
%macro WRITE 2
    	mov rax,1
    	mov rdi,1
    	mov rsi,%1
    	mov rdx,%2
    	syscall
%endmacro
 
%macro READ 2
    	mov rax,0
    	mov rdi,0
    	mov rsi,%1
    	mov rdx,%2
    	syscall
%endmacro
 
 
section .data
    	msg1 db  "Enter 2 numbers ",10
    	len1 equ $-msg1
    	msg2 db "Addition : ",10
    	len2 equ $-msg2
    	msg3 db "Substraction : ",10
    	len3 equ $-msg3
    	msg4 db "Multiplication : ",10
    	len4 equ $-msg4
    	msg5 db "Quotient : ",10
    	len5 equ $-msg5
    	msg6 db 10,"Remainder : ",10
    	len6 equ $-msg6
    	msg7 db "Wrong choice",10
    	len7 equ $-msg7

menumsg db 10,"*****Calcultor Menu*****",10
    	db "1.Addition",10
    	db "2.Substraction",10
    	db "3.Multiplication",10
    	db "4.Division",10
    	db "5.Exit",10
    	db "Enter your choice : ",10
    	menulen equ $-menumsg
 
section .bss
    	char_buff resb 17
    	a resq 1
    	b resq 1
    	c resq 1
    	d resq 1
    	choice resb 2
 
section .text
global _start:
_start:
 
printmenu:WRITE menumsg,menulen
    	READ choice,02
    	cmp byte[choice],31H
    	je addition
    	cmp byte[choice],32H
    	je substraction
    	cmp byte[choice],33H
    	je multiplication
    	cmp byte[choice],34H
    	je division
    	cmp byte[choice],35H
    	je exit
    	WRITE msg7,len7
    	jmp printmenu
 
addition:WRITE msg1,len1
    	READ char_buff,17
    	dec rax
    	mov rcx,rax
    	call accept
    	mov [a],rbx
    	READ char_buff,17
    	dec rax
    	mov rcx,rax
    	call accept
    	mov[b],rbx
    	WRITE msg2,len2
    	mov rax,[a]
    	add rax,[b]
    	mov [c],rax
    	mov rbx,[c]
    	call display
    	jmp printmenu
 
substraction:
    	WRITE msg1,len1
    	READ char_buff,17
    	dec rax
    	mov rcx,rax
    	call accept
    	mov [a],rbx
    	READ char_buff,17
    	dec rax
    	mov rcx,rax
    	call accept
    	mov[b],rbx
    	WRITE msg3,len3
    	mov rax,[a]
    	sub rax,[b]
    	mov [c],rax
    	mov rbx,[c]
    	call display
    	jmp printmenu
 
multiplication:
    	WRITE msg1,len1
    	READ char_buff,17
    	dec rax
    	mov rcx,rax
    	call accept
    	mov [a],rbx
    	READ char_buff,17
    	dec rax
    	mov rcx,rax
    	call accept
    	mov[b],rbx
 
    	WRITE msg4,len4
 
    	mov rax,[a]
    	mul qword [b]
    	mov [c],rax
    	mov rbx,rdx
    	call display
    	mov rbx,[c]
    	call display
    	jmp printmenu
 
division:
    	WRITE msg1,len1
    	READ char_buff,17
    	dec rax
    	mov rcx,rax
    	call accept
    	mov [a],rbx
 
    	READ char_buff,17
    	dec rax
    	mov rcx,rax
    	call accept
    	mov[b],rbx
 
    	mov rax,[a]
    	mov rdx,00H
    	div qword [b]
    	mov [c],rax
    	mov [d],rdx
    	WRITE msg5,len5
    	mov rbx,[c]
    	call display
    	WRITE msg6,len6
    	mov rbx,[d]
    	call display
    	jmp printmenu
 
   exit:mov rax,60
    	mov rdi,00
    	syscall
 
 
display: mov rsi,char_buff
     	mov rcx,16
 	up1:rol rbx,04
     	mov dl,bl
     	and dl,0FH
     	cmp dl,09
     	jbe add30
     	add dl,07H
   add30:add dl,30H
     	mov byte[rsi],dl
     	inc rsi
     	dec rcx
     	jnz up1
     	WRITE char_buff,16
     	ret
 
accept:
    	mov rsi,char_buff
    	mov rbx,00H
 	up:mov rdx,00H
    	mov dl,byte[rsi]
    	cmp dl,39H
    	jbe sub30
    	sub dl,07H
  sub30:sub dl,30H
    	shl rbx,04H
    	add rbx,rdx
    	inc rsi
    	dec rcx
    	jnz up
    	ret
//ass2
%macro WRITE 02
mov rax,1
mov rdi,1
mov rsi,%1
mov rdx,%2
syscall
%endmacro

%macro READ 02
mov rax,0
mov rdi,0
mov rsi,%1
mov rdx,%2
syscall
%endmacro

section .data

menu    db 10, "***menu***",10
        db 10, "1) BCD TO HEX",10
        db 10, "2) HEX TO BCD",10
        db 10, "3) EXIT",10
        db 10, "Enter your choice",10
menulen equ $-menu
msg1 db "enter number to be converted from bcd to hex:",10
len1 equ $-msg1
msg2 db "enter number to be converted from hex to bcd:",10
len2 equ $-msg2
msg3 db "Answer is:",10
len3 equ $-msg3
msg8 db "Wrong choice, choose again :",10
len8 equ $-msg8

section .bss
ans resq 1
cnt resb 1
x resb 1
actl resq 1
choice resb 2
char_buff resb 17

section .text
global _start
_start:

menumsg:WRITE menu,menulen                 ;menu
        READ choice,02

cmp byte[choice],31H                  ;menu driven
je bcdtohex
cmp byte[choice],32H
je hextobcd
cmp byte[choice],33H
je exit
WRITE msg8,len8
JMP menumsg

bcdtohex: WRITE msg1,len1
READ char_buff,17
dec rax
mov [actl],rax
mov rax,00
mov rsi, char_buff
mov rbx,0AH
up: mul rbx
mov rdx,00
mov dl, byte[rsi]
sub dl,30H
add rax,rdx
inc rsi
dec qword[actl]
jnz up
mov [ans],rax
WRITE msg3,len3
mov rbx,[ans]
call display
JMP _start

hextobcd:WRITE msg2, len2
READ char_buff,17
call accept
mov byte[cnt],00
mov rax,rbx
up1:mov rdx,00
mov rbx,0AH

div rbx

push rdx
inc byte[cnt]
cmp rax,00
jne up1

WRITE msg3,len3

up2: pop rdx
add dl,30H
mov byte[x],dl
WRITE x , 01
dec byte[cnt]
jnz up2
JMP _start


JMP menumsg


exit:   mov rax,60;
        mov rdi,0
        syscall

accept: dec rax
        mov [actl],rax

        mov rbx,0
        mov rsi,char_buff

        up3:shl rbx,04H
        mov rdx,0
        mov dl, byte[rsi]
        cmp dl,39H
        jbe sub30
        sub dl,07H

        sub30:  sub dl,30H
        add rbx,rdx
        inc rsi
        dec qword[actl]
        jnz up3
ret

display:mov rsi,char_buff
        mov rcx,16
        up4:rol rbx,04
        mov dl,bl
        and dl,0FH
        cmp dl,09H
        jbe add30

        add dl,07H
        add30:add dl,30H
        mov byte[rsi],dl
        inc rsi
        dec rcx
        jnz up4

        WRITE char_buff,16
ret
//ass4


%macro WRITE 02
mov rax, 01
mov rdi, 01
mov rsi, %1
mov rdx, %2
syscall
%endmacro

%macro READ 02
mov rax, 00
mov rdi, 00
mov rsi, %1
mov rdx, %2
syscall
%endmacro

section .data
  menu: db 10,10 
	db 10,"----MENU----",10
        db "1.String Length",10
	db "2.String Copy",10 
	db "3.String Concatenation",10 
	db "4.String Reverse",10 
	db "5.String Comparison",10 
	db "6.String Palindrome",10 
	db "7.String Substring",10
        db "8.Exit",10
	db 10,"Enter Your Choice :" 
  menulen: equ $-menu

  msg1: db 10,"Enter String1 :"
  len1: equ $-msg1
  msg2: db 10,"Enter String2 :"
  len2: equ $-msg2
  msg3: db "Invalid Choice",10
  len3: equ $-msg3
  msg4: db 10,"String1 Length is :"
  len4: equ $-msg4 
  msg5: db 10,"Copy of String1 in String2 is :"
  len5: equ $-msg5
  msg6: db 10,"String after Concatenation is :"
  len6: equ $-msg6
  msg7: db 10,"Reverse of String1 is :"
  len7: equ $-msg7
  msg8: db 10,"Strings are Equal",10
  len8: equ $-msg8
  msg9: db 10,"Strings are Not Equal",10
  len9: equ $-msg9
  msg10: db 10,"String1 is Palindrome",10
  len10: equ $-msg10
  msg11: db 10,"String1 is Not Palindrome",10
  len11: equ $-msg11
  msg12: db 10,"Substring is Present",10
  len12: equ $-msg12
  msg13: db 10,"Substring is Not Present",10
  len13: equ $-msg13

section .bss
  str1 resb 20
  str2 resb 20
  str3 resb 20
  l1 resq 1
  l2 resq 1
  l3 resq 1
  choice resb 02
  char_buff resb 16

section .text
  global _start
_start:
  WRITE msg1,len1
  READ str1,20
  dec rax
  mov [l1],rax

printmenu:
  WRITE menu,menulen
  READ choice,02

  cmp byte[choice],31H
  je strlen
  cmp byte[choice],32H
  je strcpy   
  cmp byte[choice],33H
  je strcon
  cmp byte[choice],34H
  je strrev
  cmp byte[choice],35H
  je strcom
  cmp byte[choice],36H
  je strpal
  cmp byte[choice],37H
  je strstr
  cmp byte[choice],38H
  je exit
  
  WRITE msg3,len3
  jmp printmenu

strlen:
  WRITE msg4,len4
  mov rbx,[l1]
  call display
  jmp printmenu

strcpy:
  mov rsi,str1
  mov rdi,str2
  mov rcx,[l1]
  CLD
  rep movsb
  WRITE msg5,len5
  WRITE str2,[l1]
  jmp printmenu

strcon:
  WRITE msg2,len2
  READ str2,20
  dec rax
  mov [l2],rax

  mov rsi,str1
  mov rdi,str3
  mov rcx,[l1]
  CLD
  rep movsb
  
  mov rsi,str2
  mov rcx,[l2]
  CLD
  rep movsb

  mov rax,[l1]
  add rax,[l2]
  mov [l3],rax

  WRITE msg6,len6
  WRITE str3,[l3]
  jmp printmenu

strrev:
  mov rsi,str1
  mov rdi,str3
  add rdi,[l1]
  dec rdi
  mov rcx,[l1]
up:
  mov bl,byte[rsi]
  mov byte[rdi],bl
  
  inc rsi
  dec rdi
  dec rcx
  jnz up
 
  WRITE msg7,len7
  WRITE str3,[l1]
  jmp printmenu

strcom:
  WRITE msg2,len2
  READ str2,20
  dec rax
  mov [l2],rax
  
  mov rbx,[l1]
  cmp rbx,[l2]
  jne ntequal
  
  mov rsi,str1
  mov rdi,str2
  mov rcx,[l1]
  CLD
  repe cmpsb
  jne ntequal

  WRITE msg8,len8
  jmp printmenu
ntequal:
  WRITE msg9,len9
  jmp printmenu

strpal:
  mov rsi,str1
  mov rdi,str3
  add rdi,[l1]
  dec rdi
  mov rcx,[l1]
up4:
  mov bl,byte[rsi]
  mov byte[rdi],bl
  
  inc rsi
  dec rdi
  dec rcx
  jnz up4

  
  mov rbx,[l1]
  cmp rbx,[l1]
  jne ntequal1
  
  mov rsi,str1
  mov rdi,str3
  mov rcx,[l1]
  CLD
  repe cmpsb
  jne ntequal1

  WRITE msg10,len10
  jmp printmenu
ntequal1:
  WRITE msg11,len11
  jmp printmenu

strstr:
  WRITE msg2,len2
  READ str2,20
  dec rax
  mov [l2],rax

  mov rsi,str1
  mov rdi,str2
  mov rbx,[l1]
  mov rcx,[l2]
  mov dh,byte[rdi]
up2:
  mov dl,byte[rsi]
  cmp dl,byte[rdi]
  je same
  cmp byte[rsi],dh
  je skip 
  inc rsi
  dec rbx
skip:
  mov rdi,str2
  mov rcx,[l2]
  jmp skip1
same:
  inc rsi
  inc rdi
  dec rbx
  dec rcx
skip1:
  cmp rcx,00
  je present
  cmp rbx,00
  je ntpresent
  jmp up2
present:
  WRITE msg12,len12
  jmp printmenu
ntpresent:
  WRITE msg13,len13
  jmp printmenu  
  
exit:
  mov rax,60
  mov rdi,00
  syscall

display:
  mov rsi,char_buff
  mov rcx,16
up1:
  rol rbx,04H
  mov dl,bl
  and dl,0FH
  cmp dl,09H
  jbe add30
  add dl,07H
add30:
  add dl,30H
  mov byte[rsi],dl
  inc rsi
  dec rcx
  jnz up1
  WRITE char_buff,16
  ret
//ass3
%macro write 2
  mov rax,1
  mov rdi,1
  mov rsi,%1
  mov rdx,%2
  syscall
%endmacro

%macro read 2
  mov rax,0
  mov rdi,0
  mov rsi,%1
  mov rdx,%2
  syscall
%endmacro

section .data
  msg db"1..Mutiplication using Successive Addition ",10
  db"2.. Multiplication using Add and shift ",10
  db"3..Exit",10
  msg_len equ $-msg
  choice_msg db"Enter your choice:: 1/2/3",10
  ch_len equ $-choice_msg
  msg1 db "Enter the mutiplicant",10
  msg1_len equ $-msg1
  msg2 db "Enter the mutiplier",10
  msg2_len equ $-msg2
  msg3 db "Multiplication Result/product ",10
  msg3_len equ $-msg3
  msg_space db " ",10
  msg_space_len equ $-msg_space

section .bss
  num resb 17
  choice resb 2
  buff resb 16
  no resq 1
  ccnt resq 1
  no1 resq 1
  no2 resq 1
  A resq 1
  B resq 1
  Q resq 1
  n resq 1

section .text
global _start
_start:
main_menu:
  write msg_space ,msg_space_len
  write msg ,msg_len
  write msg_space ,msg_space_len
  write choice_msg,ch_len
  read choice,2
  cmp byte[choice],31h
  je op1
  cmp byte[choice],32h
  je op2
  cmp byte[choice],33h
  je op3

op1: ; Multiplication using Successive Addition
  write msg1,msg1_len
  read num,17
  dec rax
  mov qword[ccnt],rax
  call accept ; to accept multiplicand
  mov qword[no1],rbx
  write msg2,msg2_len
  read num,17
  dec rax
  mov qword[ccnt],rax
  call accept ; to accept multiplier
  mov qword[no2],rbx
  mov rbx,00

l1:
  add rbx,qword[no1]
  dec qword[no2] ; decrement multiplier by 1 e.g. decrement 4 (as 5*4=5+5+5+5)
  cmp qword[no2],00 ;till 00
  jne l1
  write msg3,msg3_len
  call disp
  jmp main_menu

op2: ; Multiplication using Add and shift
  write msg1,msg1_len
  read num,17
  dec rax
  mov qword[ccnt],rax
  call accept ; to accept multiplicand
  mov qword[B],rbx
  write msg2,msg2_len
  read num,17
  dec rax
  mov qword[ccnt],rax
  call accept ; to accept multiplier
  mov qword[Q],rbx ; Q is multiplier
  mov qword[A],00 ; Accumulator initialization
  mov qword[n],64 ; 64 bit counter value

above:
  mov rax,qword[Q]
  and rax,01h ; To get qo bit (LSB ) to compare with 1
  cmp rax,01h ; compare with 1
  jne shift
  mov rax,qword[A]
  mov rbx,qword[B]
  add rax,rbx
  mov qword[A],rax ; addition result is stored in variable A

shift:
  mov rax,qword[A]
  mov rbx,qword[Q]
  shr rbx,01
  and rax,01 ; to get LSB
  cmp rax,01
  jne shift_a
  mov rdx,01 ; to shift LSB of A to MSB of Q
  ror rdx,01 ;
  or rbx,rdx ;

shift_a:
  mov rax,qword[A]
  shr rax,01
  mov qword[A],rax
  mov qword[Q],rbx
  dec qword[n]
  jnz above
  write msg3,msg3_len
  mov rbx,qword[A]
  call disp
  mov rbx,qword[Q]
  call disp
  jmp main_menu

op3:
  mov rax,60
  mov rdi,0
  syscall

accept:
  mov rbx,00
  mov rsi,num
  mov rdx,00h

up1:shl rbx,04h
  mov dl,byte[rsi]
  cmp dl,39h
  jbe sub_30
  sub dl,07h
  sub_30:sub dl,30h
  add rbx,rdx
  inc rsi
  dec qword[ccnt]
  jnz up1
  ret

disp:
  mov rsi,buff
  mov rcx,16
  mov rdx,00

up2:
  rol rbx,04
  mov dl,bl
  and dl,0fh
  cmp dl,09
  jbe mc
  add dl,07h

mc:
  add dl,30h
  mov [rsi],dl
  inc rsi
  dec rcx
  jnz up2
  write buff,16
  ret
//ass5
open
%macro WRITE 2
mov rax,1
mov rdi,1
mov rsi,%1
mov rdx,%2
syscall
%endmacro

section .data
err1: db "Invalid No of Arguments",10
len1: equ $-err1
err2: db "File opening error",10
len2: equ $-err2

section .bss
fname resb 32
fd resq 1
buffer resb 100
actl resq  1

section .text
 global _start
_start:
pop rcx
cmp rcx,02
jne error1

pop rcx 
pop rcx

mov rsi,fname
mov rdx,00H

up:
mov bl,byte[rcx+rdx]
cmp bl,00H
je down 
mov byte[rsi+rdx],bl
inc rdx
jmp up
down:
mov byte[rsi+rdx],00H

mov rax,02
mov rdi,fname
mov rsi,00H
mov rdx,0644H
syscall

cmp rax,00H
je error2

mov [fd],rax

again:
mov rax,00H
mov rdi,[fd]
mov rsi,buffer
mov rdx,100
syscall

mov [actl],rax
WRITE buffer,[actl]
cmp qword[actl],100
je again

mov rax,03
mov rdi,[fd]
syscall

exit:
mov rax,60
mov rdi,00
syscall

error1:
WRITE err1,len1
jmp exit

error2:
WRITE err2,len2
jmp exit
copy
%macro WRITE 02
  mov rax,01
  mov rdi,01
  mov rsi,%1
  mov rdx,%2
  syscall
%endmacro

%macro fopen 02
  mov rax,02
  mov rdi,%1
  mov rsi,%2
  mov rdx,0777o
  syscall
%endmacro

%macro fclose 01
  mov rax,03
  mov rdi,%1
  syscall
%endmacro

section .data
  err1: db "Invalid no of arguments",10
  len1: equ $-err1
  err2: db "Source file error",10
  len2: equ $-err2  
  err3: db "Destination file error",10
  len3: equ $-err3

  msg1: db "File Copied Successfully",10
  len4: equ $-msg1

section .bss
  src resb 32
  dest resb 32
  fd1 resq 1
  fd2 resq 1 
  fd3 resq 1
  buffer resb 100
  actl resq 1

section .text
  global _start
_start:
  pop rcx 
  cmp rcx,03H
  jne error1

  pop rcx

  pop rcx
  mov rsi,src
  mov rdx,00H
up:
  mov bl,byte[rcx+rdx] 
  cmp bl,00H
  je down
  mov byte[rsi+rdx],bl
  inc rdx
  jmp up
down:
  mov byte[rsi+rdx],00H

  pop rcx
  mov rsi,dest
  mov rdx,00H
up1:
  mov bl,byte[rcx+rdx] 
  cmp bl,00H
  je down1
  mov byte[rsi+rdx],bl
  inc rdx
  jmp up1
down1:
  mov byte[rsi+rdx],00H

  fopen src,00H
  cmp rax,00H
  jle error2
  mov [fd1],rax
  
  fopen dest,00H
  cmp rax,00
  jle createfile
  mov [fd2],rax
  fclose [fd2]
  jmp skipcreate
createfile:
  mov rax,85
  mov rdi,dest
  mov rsi,0777o
  syscall
skipcreate:
  fopen dest,01H
  cmp rax,00
  jle error3
  mov  [fd3],rax
up2:
  mov rax,00
  mov rdi,[fd1]
  mov rsi,buffer
  mov rdx,100
  syscall

  mov [actl],rax

  mov rax,01
  mov rdi,[fd3]
  mov rsi,buffer
  mov rdx,[actl]
  syscall
 
  cmp qword[actl],100
  je up2
  
  fclose [fd1]
  fclose [fd3]
  WRITE msg1,len4
exit:
  mov rax,60
  mov rdi,00
  syscall
error1:
  WRITE err1,len1
  jmp exit
error2:
  WRITE err2,len2
  jmp exit
error3:
  WRITE err3,len3
  jmp exit
delete
%macro WRITE 02
mov rax,1
mov rdi,1
mov rsi,%1
mov rdx,%2
syscall
%endmacro

section .data
err1: db "Invalid No of Arguments",10
len1: equ $-err1
err2: db "File opening error",10
len2: equ $-err2
msg1: db "File Deleted Successfully",10
len3: equ $-msg1

section .bss
fname resb 32
fd resq 1

section .text
  global _start
_start:
pop rcx
cmp rcx,02
jne error1

pop rcx 
pop rcx
mov rsi,fname
mov rdx,00H

up:
mov bl,byte[rcx+rdx]
cmp bl,00H
je down
mov byte[rsi+rdx],bl
inc rdx
jmp up
down:
mov byte[rsi+rdx],00H

mov rax,02
mov rdi,fname
mov rsi,00
mov rdx,0777o
syscall

cmp rax,00
jle error2

mov [fd],rax
mov rax,03
mov rdi,[fd]
syscall

mov rax,87
mov rdi,fname
syscall

WRITE msg1,len3

exit:
mov rax,60
mov rdi,00
syscall

error1:
WRITE err1,len1
jmp exit

error2:
WRITE err2,len2
jmp exit
//ass6
extern printf,scanf
%macro PRINT 02
push rbp
mov rax,00
mov rdi,%1
mov rsi,%2
call printf
pop rbp
%endmacro
//

%macro SCAN 02
push rbp
mov rdx,00
mov rdi,%1
mov rsi,%2
call scanf
pop rbp
%endmacro

%macro PRINTFLOAT 02
push rbp
mov rax,01
mov rdi,%1
movsd xmm0,%2
call printf
pop rbp
%endmacro

section .data
msg1: db "Enter a,b,c:",10,0
fmt1: db "%s",0
fmt2: db "%lf",0

section .bss
a resq 1
b resq 1
c resq 1
t1 resq 1
t2 resq 1
t3 resq 1
t4 resq 1
r1 resq 1
r2 resq 1
temp resw 1

section .text
 global main
main:
PRINT fmt1,msg1
SCAN fmt2,a
SCAN fmt2,b
SCAN fmt2,c

finit 
fld qword[b]
fmul qword[b]
fstp qword[t1]
fld qword[a]
fmul qword[c]
mov word[temp],04
fimul word[temp]
fstp qword[t2]
fld qword[t1]
fsub qword[t2]
fstp qword[t1]
fld qword[t1]
fstp qword[t2]

fld qword[b]
fchs
fstp qword[t3]
fld qword[a]
mov word[temp],2
fimul word[temp]
fstp qword[t4]

cmp qword[t1],00H
je printsecond
fld qword[t3]
fadd qword[t2]
fdiv qword[t4]
fstp qword[r1]
PRINTFLOAT fmt2,[r1]

printsecond:
fld qword[t3]
fsub qword[t2]
fdiv qword[t4]
fstp qword[r2]
PRINTFLOAT fmt2,[r2]
mov rax,00
ret






























